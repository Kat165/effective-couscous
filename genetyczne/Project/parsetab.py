
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startBLOCK_END CALCEXPR CALCLOGICALEXPR ELIF ELSE FALSE FLOATNUMBER IF INPUT INSTR INTNUMBER NL OUTPUT TEXT TRUE WHILE\n    start : INSTRUCTIONS_SET\n    \n    INSTRUCTIONS_SET : INSTRUCTION NL\n        | INSTRUCTIONS_SET INSTRUCTION NL\n    \n    INSTRUCTION : INSTR '(' EXPRESSION ',' EXPRESSION ',' EXPRESSION ')'\n        | IF_STATEMENT\n        | WHILE_STATEMENT\n        | OUTPUT '(' EXPRESSION ')'\n    \n    LOGICALEXPRESSION : TRUE\n        | FALSE\n        | TEXT\n        | INTNUMBER\n        | FLOATNUMBER\n        | CALCLOGICALEXPR '(' EXPRESSION ',' EXPRESSION ',' EXPRESSION ')'\n        | CALCLOGICALEXPR '(' LOGICALEXPRESSION ',' EXPRESSION ',' EXPRESSION ')'\n        | CALCLOGICALEXPR '(' EXPRESSION ',' LOGICALEXPRESSION ',' EXPRESSION ')'\n        | CALCLOGICALEXPR '(' LOGICALEXPRESSION ',' LOGICALEXPRESSION ',' EXPRESSION ')'\n    \n    WHILE_STATEMENT : WHILE LOGICALEXPRESSION ':' add_indent NL INSTRUCTIONS_SET BLOCK_END remove_indent\n    \n    IF_STATEMENT : IF IF_BODY\n    \n    IF_BODY : LOGICALEXPRESSION ':' add_indent NL INSTRUCTIONS_SET BLOCK_END remove_indent\n        | LOGICALEXPRESSION ':' add_indent NL INSTRUCTIONS_SET remove_indent ELIF IF_BODY\n        | LOGICALEXPRESSION ':' add_indent NL INSTRUCTIONS_SET remove_indent ELSE ':' add_indent NL INSTRUCTIONS_SET BLOCK_END remove_indent\n    \n    EXPRESSION : CALCEXPR '(' EXPRESSION ',' EXPRESSION ',' EXPRESSION ')'\n        | INTNUMBER\n        | FLOATNUMBER\n        | TEXT\n        | INSTR '(' EXPRESSION ',' EXPRESSION ',' EXPRESSION ')'\n        | INPUT '(' ')'\n    add_indent : remove_indent : "
    
_lr_action_items = {'INSTR':([0,2,11,12,13,23,33,35,36,37,51,52,53,54,55,56,57,58,63,69,70,71,72,74,76,96,97,],[4,4,-2,24,24,-3,24,24,24,24,4,24,24,4,24,24,24,4,4,24,24,24,24,24,24,4,4,]),'OUTPUT':([0,2,11,23,51,54,58,63,96,97,],[7,7,-2,-3,7,7,7,7,7,7,]),'IF':([0,2,11,23,51,54,58,63,96,97,],[8,8,-2,-3,8,8,8,8,8,8,]),'WHILE':([0,2,11,23,51,54,58,63,96,97,],[9,9,-2,-3,9,9,9,9,9,9,]),'$end':([1,2,11,23,],[0,-1,-2,-3,]),'NL':([3,5,6,10,14,32,34,39,40,46,67,73,75,77,84,87,88,95,98,99,],[11,-5,-6,23,-18,-28,-28,-7,51,54,-29,-29,-4,-19,-17,-20,-28,96,-29,-21,]),'(':([4,7,21,24,26,30,],[12,13,33,35,37,38,]),'TRUE':([8,9,33,52,53,78,],[16,16,16,16,16,16,]),'FALSE':([8,9,33,52,53,78,],[17,17,17,17,17,17,]),'TEXT':([8,9,12,13,33,35,36,37,52,53,55,56,57,69,70,71,72,74,76,78,],[18,18,29,29,45,29,29,29,45,45,29,29,29,29,29,29,29,29,29,18,]),'INTNUMBER':([8,9,12,13,33,35,36,37,52,53,55,56,57,69,70,71,72,74,76,78,],[19,19,27,27,43,27,27,27,43,43,27,27,27,27,27,27,27,27,27,19,]),'FLOATNUMBER':([8,9,12,13,33,35,36,37,52,53,55,56,57,69,70,71,72,74,76,78,],[20,20,28,28,44,28,28,28,44,44,28,28,28,28,28,28,28,28,28,20,]),'CALCLOGICALEXPR':([8,9,33,52,53,78,],[21,21,21,21,21,21,]),'BLOCK_END':([11,23,58,63,97,],[-2,-3,67,73,98,]),'ELIF':([11,23,58,68,],[-2,-3,-29,78,]),'ELSE':([11,23,58,68,],[-2,-3,-29,79,]),'CALCEXPR':([12,13,33,35,36,37,52,53,55,56,57,69,70,71,72,74,76,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'INPUT':([12,13,33,35,36,37,52,53,55,56,57,69,70,71,72,74,76,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),':':([15,16,17,18,19,20,22,79,89,90,91,92,],[32,-8,-9,-10,-11,-12,34,88,-13,-15,-16,-14,]),',':([16,17,25,27,28,29,41,42,43,44,45,47,48,49,50,59,60,61,62,64,66,89,90,91,92,93,94,],[-8,-9,36,-23,-24,-25,52,53,-11,-12,-10,55,56,57,-27,69,70,71,72,74,76,-13,-15,-16,-14,-26,-22,]),')':([27,28,29,31,38,50,65,80,81,82,83,85,86,93,94,],[-23,-24,-25,39,50,-27,75,89,90,91,92,93,94,-26,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'INSTRUCTIONS_SET':([0,51,54,96,],[2,58,63,97,]),'INSTRUCTION':([0,2,51,54,58,63,96,97,],[3,10,3,3,10,10,3,10,]),'IF_STATEMENT':([0,2,51,54,58,63,96,97,],[5,5,5,5,5,5,5,5,]),'WHILE_STATEMENT':([0,2,51,54,58,63,96,97,],[6,6,6,6,6,6,6,6,]),'IF_BODY':([8,78,],[14,87,]),'LOGICALEXPRESSION':([8,9,33,52,53,78,],[15,22,42,60,61,15,]),'EXPRESSION':([12,13,33,35,36,37,52,53,55,56,57,69,70,71,72,74,76,],[25,31,41,47,48,49,59,62,64,65,66,80,81,82,83,85,86,]),'add_indent':([32,34,88,],[40,46,95,]),'remove_indent':([58,67,73,98,],[68,77,84,99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> INSTRUCTIONS_SET','start',1,'p_start','parser.py',100),
  ('INSTRUCTIONS_SET -> INSTRUCTION NL','INSTRUCTIONS_SET',2,'p_instructionsset','parser.py',109),
  ('INSTRUCTIONS_SET -> INSTRUCTIONS_SET INSTRUCTION NL','INSTRUCTIONS_SET',3,'p_instructionsset','parser.py',110),
  ('INSTRUCTION -> INSTR ( EXPRESSION , EXPRESSION , EXPRESSION )','INSTRUCTION',8,'p_instruction','parser.py',119),
  ('INSTRUCTION -> IF_STATEMENT','INSTRUCTION',1,'p_instruction','parser.py',120),
  ('INSTRUCTION -> WHILE_STATEMENT','INSTRUCTION',1,'p_instruction','parser.py',121),
  ('INSTRUCTION -> OUTPUT ( EXPRESSION )','INSTRUCTION',4,'p_instruction','parser.py',122),
  ('LOGICALEXPRESSION -> TRUE','LOGICALEXPRESSION',1,'p_logicalexpression','parser.py',136),
  ('LOGICALEXPRESSION -> FALSE','LOGICALEXPRESSION',1,'p_logicalexpression','parser.py',137),
  ('LOGICALEXPRESSION -> TEXT','LOGICALEXPRESSION',1,'p_logicalexpression','parser.py',138),
  ('LOGICALEXPRESSION -> INTNUMBER','LOGICALEXPRESSION',1,'p_logicalexpression','parser.py',139),
  ('LOGICALEXPRESSION -> FLOATNUMBER','LOGICALEXPRESSION',1,'p_logicalexpression','parser.py',140),
  ('LOGICALEXPRESSION -> CALCLOGICALEXPR ( EXPRESSION , EXPRESSION , EXPRESSION )','LOGICALEXPRESSION',8,'p_logicalexpression','parser.py',141),
  ('LOGICALEXPRESSION -> CALCLOGICALEXPR ( LOGICALEXPRESSION , EXPRESSION , EXPRESSION )','LOGICALEXPRESSION',8,'p_logicalexpression','parser.py',142),
  ('LOGICALEXPRESSION -> CALCLOGICALEXPR ( EXPRESSION , LOGICALEXPRESSION , EXPRESSION )','LOGICALEXPRESSION',8,'p_logicalexpression','parser.py',143),
  ('LOGICALEXPRESSION -> CALCLOGICALEXPR ( LOGICALEXPRESSION , LOGICALEXPRESSION , EXPRESSION )','LOGICALEXPRESSION',8,'p_logicalexpression','parser.py',144),
  ('WHILE_STATEMENT -> WHILE LOGICALEXPRESSION : add_indent NL INSTRUCTIONS_SET BLOCK_END remove_indent','WHILE_STATEMENT',8,'p_whilestatement','parser.py',159),
  ('IF_STATEMENT -> IF IF_BODY','IF_STATEMENT',2,'p_ifstatement','parser.py',166),
  ('IF_BODY -> LOGICALEXPRESSION : add_indent NL INSTRUCTIONS_SET BLOCK_END remove_indent','IF_BODY',7,'p_ifbody','parser.py',177),
  ('IF_BODY -> LOGICALEXPRESSION : add_indent NL INSTRUCTIONS_SET remove_indent ELIF IF_BODY','IF_BODY',8,'p_ifbody','parser.py',178),
  ('IF_BODY -> LOGICALEXPRESSION : add_indent NL INSTRUCTIONS_SET remove_indent ELSE : add_indent NL INSTRUCTIONS_SET BLOCK_END remove_indent','IF_BODY',13,'p_ifbody','parser.py',179),
  ('EXPRESSION -> CALCEXPR ( EXPRESSION , EXPRESSION , EXPRESSION )','EXPRESSION',8,'p_expression','parser.py',195),
  ('EXPRESSION -> INTNUMBER','EXPRESSION',1,'p_expression','parser.py',196),
  ('EXPRESSION -> FLOATNUMBER','EXPRESSION',1,'p_expression','parser.py',197),
  ('EXPRESSION -> TEXT','EXPRESSION',1,'p_expression','parser.py',198),
  ('EXPRESSION -> INSTR ( EXPRESSION , EXPRESSION , EXPRESSION )','EXPRESSION',8,'p_expression','parser.py',199),
  ('EXPRESSION -> INPUT ( )','EXPRESSION',3,'p_expression','parser.py',200),
  ('add_indent -> <empty>','add_indent',0,'p_add_indent','parser.py',208),
  ('remove_indent -> <empty>','remove_indent',0,'p_remove_indent','parser.py',213),
]
